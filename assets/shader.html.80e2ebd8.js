import{_ as i,r as l,o as r,c as n,a as o,b as e,d as t,e as d}from"./app.1410bcfb.js";const s={},a=d('<h1 id="光影篇" tabindex="-1"><a class="header-anchor" href="#光影篇" aria-hidden="true">#</a> 光影篇</h1><h2 id="请问-xx-显卡-cpu-内存-推荐用什么光影" tabindex="-1"><a class="header-anchor" href="#请问-xx-显卡-cpu-内存-推荐用什么光影" aria-hidden="true">#</a> 请问（<code>XX 显卡/ CPU / 内存</code>）推荐用什么光影</h2><ul><li><p><strong>不会有具体答案。</strong></p></li><li><p><code>不同显卡</code> 对应光影的帧数表现 <code>不同</code>，但 <strong>鉴于</strong> 不同人有不同标准，我们不可能给出一下就让人满意的答复。</p></li><li><p>如果你真想提该问题，请在问题里带上你的 <code>显卡型号</code>（包括桌面端还是移动端）、需要的帧数，以及你想要的光影风格。</p></li></ul><h2 id="请问有没有-稳-xx-帧-的光影" tabindex="-1"><a class="header-anchor" href="#请问有没有-稳-xx-帧-的光影" aria-hidden="true">#</a> 请问有没有 <code>稳 XX 帧</code> 的光影？</h2><ul><li><p>同上，<strong>不会有具体答案。</strong></p></li><li><p>光影在游戏中的渲染是一个 <strong>动态</strong> 的过程，任何变量（<code>游戏版本</code>、<code>地图地形</code>、<code>材质</code>、<code>模组</code>、<code>数据包</code> 等等）都会对光影的帧数 <strong>产生影响</strong>，从而使帧数变得不稳定。</p></li><li><p>此类问题最好的答案是自行寻找。</p></li></ul><h2 id="xx-光影-用什么游戏版本-xx-版本-用什么光影" tabindex="-1"><a class="header-anchor" href="#xx-光影-用什么游戏版本-xx-版本-用什么光影" aria-hidden="true">#</a> <code>XX 光影</code> 用什么游戏版本？/ <code>XX 版本</code> 用什么光影？</h2>',6),p=o("p",null,[o("strong",null,"一般来说，光影不区分游戏版本"),e("，"),o("code",null,"GLSL"),e(" 的兼容性可以 "),o("strong",null,"保证"),e(" 光影能够在大多数设备上运行。如果你遇到有部分光影不兼容当前客户端的情况，可能是以下几点：")],-1),g=d("<li><p><strong>你使用了 <code>OptiFine 最新预览版</code>：</strong></p><ul><li><p><code>预览版 OptiFine</code> 用于 <strong>测试</strong> 及 <strong>反馈 <code>BUG</code></strong> ；</p></li><li><p>直接使用此版本会导致一系列不兼容现象，有时候还会无法启用光影。</p></li></ul></li><li><p><strong>光影本身年久失修：</strong></p><ul><li><p>可能是 <code>Shadersmod 时代</code>的产物；</p></li><li><p>在 <code>OptiFine</code> 严谨的检查下会出现 <strong>代码报错问题</strong>（如 <code>SEUS RC6</code> ）。</p></li></ul></li>",2),u=o("p",null,[o("strong",null,[o("code",null,"Mod"),e(" 兼容问题：")])],-1),h=d("<li><p>请检查所用 <code>Mod</code> 是否有不兼容 <code>OptiFine</code> 的说明，包括但不限于：</p><ul><li><p><code>视觉类 Mod</code>（如： <strong>更好的树叶</strong>）、</p></li><li><p><code>自带渲染的 Mod</code>（如： <strong>植物魔法</strong>）等……</p></li></ul></li>",1),x={href:"https://mgchelp.yuque.com/rfigvp/bzn947/ggd9ms",target:"_blank",rel:"noopener noreferrer"},f=d("<li><p><strong>你使用了 <code>Iris</code>：</strong></p><ul><li>该 <code>API</code> 目前兼容性不佳，不适用于多数光影；</li></ul></li><li><p><strong>你游玩着过于老旧的游戏版本：</strong></p><ul><li><p>一些光影（如 <code>PTGI</code>） 不兼容 <code>1.7.10</code> 及以下的老版本，</p></li><li><p>因为这些版本的 <code>OptiFine</code> 或 <code>Shadersmod</code> 年久失修，</p></li><li><p>早已不兼容新的光影代码，属于正常现象；</p></li></ul></li><li><p><strong>你所用的设备不兼容最新的OpenGL版本：</strong></p><ul><li><p>如苹果公司的MacBook最高只支持 <code>OpenGL 4.1</code>，而最新的版本为4.6。</p></li><li><p>一旦光影文件内指定版本高于 <code>OpenGL 4.1</code>（即 <code>GLSL 410</code> ），便极有可能发生兼容性问题。</p></li></ul></li>",3),_=d('<h2 id="java-版-光影能否用-rtx-显卡-或-rx6000-系列以上-显卡的光追核心来提供更好的实时光线追踪效果" tabindex="-1"><a class="header-anchor" href="#java-版-光影能否用-rtx-显卡-或-rx6000-系列以上-显卡的光追核心来提供更好的实时光线追踪效果" aria-hidden="true">#</a> <code>Java 版</code> 光影能否用 <code>RTX</code> 显卡 或 <code>RX6000 系列以上</code> 显卡的光追核心来提供更好的实时光线追踪效果？</h2><ul><li><p><strong>可能可以，但不是现在：</strong></p><ul><li><p>目前 <code>Java 版 Minecraft 光影</code> 使用的 <strong>图形编程语言</strong> 为 <code>GLSL</code>，</p></li><li><p>它并 <strong>不能</strong> 通过 <code>调用光追核心</code> 来 <strong>提高光追效率</strong>。</p></li><li><p>但是，Java 版 的以下两个模组，分别是：</p><ul><li><code>VulkanMod</code>；</li><li><code>Sodium</code> 模组新开的 <code>Vulkan</code> 分支。</li></ul></li><li><p>这两个模组，能够将 MC 的<strong>图形渲染引擎</strong>替换为 <code>Vulkan</code>，理论上可实现调用硬件来加速光线追踪渲染。</p></li><li><p>但以项目的 <code>开发速度</code> 来看，想要在短时间内实现该想法，希望 <code>非常渺茫</code> 。</p></li></ul></li></ul><h2 id="我喜欢-a-光影中的水-又喜欢-b-光影中的云。我可以把这两个包结合起来吗" tabindex="-1"><a class="header-anchor" href="#我喜欢-a-光影中的水-又喜欢-b-光影中的云。我可以把这两个包结合起来吗" aria-hidden="true">#</a> 我喜欢 <code>A</code> 光影中的水，又喜欢 <code>B</code> 光影中的云。我可以把这两个包结合起来吗？</h2><ul><li><p><strong>通常情况下，不能：</strong></p><ul><li><p>在 <code>Minecraft Java 版光影包</code> 中没有 <strong>标准</strong> 的做事方式，</p></li><li><p>所以 <strong>不同</strong> 的光影包 <strong>可以（而且经常会）</strong> 以不同的方式实现相同的效果，或者使用相同的缓冲区来保存不同的信息。</p></li></ul><div class="custom-container warning"><p class="custom-container-title">注意！</p><ul><li>因此，通过 <strong>简单的添加删除文件</strong> 去结合效果是 <strong>几乎不可能</strong> 的。</li><li>但如果你擅长 <code>GLSL</code>，你当然可以试一试。</li><li>你也可以询问你想 <code>组合光影包</code> 的开发者，他们的效果是 <strong>如何/在哪里</strong> 实现的，以及在这些地方有 <strong>哪些信息</strong>，这些问题对于结合光影效果 <strong>有必要的</strong>。</li><li>但是，不要指望 开发者 <strong>无条件免费</strong> 帮你办事，或者 <strong>教你</strong> <code>GLSL</code>，<strong>这不是他们的工作！</strong></li><li>如果你对学习 <code>GLSL</code> 不感兴趣，你也可以 <strong>提出付费</strong> 让他人为你制作 <code>组合光影包</code>。</li></ul></div></li></ul><h2 id="optifine-能与-iris、sodium-一起开吗" tabindex="-1"><a class="header-anchor" href="#optifine-能与-iris、sodium-一起开吗" aria-hidden="true">#</a> <code>OptiFine</code> 能与 <code>Iris</code>、<code>Sodium</code> 一起开吗？</h2><ul><li><p><strong>不能：</strong></p><ul><li>OptiFine 与 Iris 在功能上是重复的，两者互不兼容。而钠属于优化模组，只能兼容开源的 Iris，无法兼容 OptiFine。</li></ul></li></ul><h2 id="java-版-光影能不能搭配-dlss-fsr" tabindex="-1"><a class="header-anchor" href="#java-版-光影能不能搭配-dlss-fsr" aria-hidden="true">#</a> <code>Java 版</code> 光影能不能搭配 <code>DLSS / FSR</code>？</h2><ul><li><p><strong>理论上：</strong></p><ul><li><p>FSR 可以，</p></li><li><p>DLSS 技术未开放，无法搭配。</p></li></ul><div class="custom-container warning"><p class="custom-container-title">注意！</p><ul><li><code>PTGI HRR 版本</code>也使用了与此类似的技术，<code>HRR</code> 的功能也是 <strong>降低分辨率提升帧数</strong>，</li><li>这也是很多人为什么说 <code>HRR系列</code> 看起来比 <code>E12</code> <strong>糊</strong> 的原因。</li></ul></div></li></ul><h2 id="光线追踪光影-与-传统光影-的区别是什么" tabindex="-1"><a class="header-anchor" href="#光线追踪光影-与-传统光影-的区别是什么" aria-hidden="true">#</a> <code>光线追踪光影</code> 与 <code>传统光影</code> 的区别是什么？</h2><ul><li><p><strong>是否使用了光追算法:</strong></p><ul><li><p>也就是说，无论你使用的 <code>GPU</code> 是谁家的，只要光影文件里存在光追算法，</p></li><li><p>那就属于 <code>光线追踪光影</code>，而 <strong>不取决于是否采</strong> 用 <code>RTX</code> 或 <code>RX6000</code> 系列显卡。</p></li></ul></li></ul><h2 id="iris-能否替代-optifine-xx-光影-什么时候兼容-iris" tabindex="-1"><a class="header-anchor" href="#iris-能否替代-optifine-xx-光影-什么时候兼容-iris" aria-hidden="true">#</a> <code>Iris</code> 能否替代 <code>OptiFine</code>？/ <code>XX 光影</code> 什么时候兼容 <code>Iris</code> ？</h2><ul><li><p><strong>从玩家的角度看，可能可以，但不是现在:</strong></p><ul><li>现在的情况是 <code>Iris</code> 支持的东西远少于 <code>OptiFine</code>（这意味着 <code>Iris</code> 支持的光影是 <strong>少数的</strong>），且在 <strong>最新版本</strong> 上的 <code>帧率表现</code> 很糟糕。</li></ul></li><li><p><strong>从开发者的角度看：</strong></p><ul><li><p><code>OptiFine</code> 作为 <code>光影开发者</code> 的开发环境，具有 <strong>不可替代性</strong>。</p></li><li><p>而 <code>Iris</code> <strong>只是</strong> 对 <code>OptiFine</code> 环境开发的光影 <strong>进行适配</strong>。</p></li><li><p>因此，<code>Iris</code> 是否兼容光影 <strong>取决于它自己</strong>，而 <strong>非光影主动</strong> 去适配它！</p></li></ul></li></ul><h2 id="java版-的着色器叫-光影-基岩版-的着色器就只能叫-着色器-或-伪光影" tabindex="-1"><a class="header-anchor" href="#java版-的着色器叫-光影-基岩版-的着色器就只能叫-着色器-或-伪光影" aria-hidden="true">#</a> <code>Java版</code> 的着色器叫 <code>光影</code>，<code>基岩版</code> 的着色器就只能叫 <code>着色器</code> 或 <code>伪光影</code>？</h2><ul><li><p>从图形学上讲， <code>光影</code> 的<strong>专业名称</strong>就是 <code>着色器</code> ：</p></li><li><p>光影只是 <strong>国内的另一种好听的说法</strong> ，就像你可以把 <code>引力波</code> 称作 <code>时空涟漪</code>。</p></li><li><p>基岩版由于 <code>接口</code> <strong>先天的缺乏</strong> 以及 <strong>移动设备性能不足</strong>，无法像Java 版一样做出 <code>效果相对完整</code> 的着色器，但它仍然叫做光影。</p></li><li><p>有一种说法是，<code>基岩版 PE 端</code> 光影没有实时阴影，不配叫光影。</p></li><li><p>然而 <code>光影</code> 二字，<strong>从来都不是</strong> 指代实时阴影，也 <strong>不会有任何</strong> 一位光影作者会提出 <code>没有实时阴影就不是光影</code> 这种观点！</p></li></ul><h2 id="基岩版的光影是贴图直接糊上去的" tabindex="-1"><a class="header-anchor" href="#基岩版的光影是贴图直接糊上去的" aria-hidden="true">#</a> 基岩版的光影是贴图直接糊上去的？</h2><ul><li><p>上文提到基岩版无法做出与 <code>Java 版</code> 一样的光影，缺陷相对多很多，但也并 <strong>没有简单到使用</strong> <code>图片粘贴</code> 等技术的地步。</p></li><li><p>着色器的 <strong>渲染</strong> 由 <strong>算法</strong> 完成，可以是 <strong>简单粗暴</strong> 的 <code>镜面反射场景</code>，但 <strong>不可能用贴图做到</strong>。</p></li><li><p>提出该观点的人大可拆开他们所谓的 <code>贴图光影 文件</code>，通过找到所有 <strong>疑似使用</strong> 该技术的图片来 <strong>佐证</strong> 他们的观点，否则只能是以下两种情况：</p><ul><li><p><strong>道听途说的错误说法；</strong></p></li><li><p><strong>将同样加载形式的 <code>纹理包</code> 与 <code>光影包</code> 混淆了。</strong></p></li></ul></li></ul><h2 id="基岩版-的一些有特殊效果的纹理包叫做-伪光影" tabindex="-1"><a class="header-anchor" href="#基岩版-的一些有特殊效果的纹理包叫做-伪光影" aria-hidden="true">#</a> <code>基岩版</code> 的一些有特殊效果的纹理包叫做 <code>伪光影</code> ？</h2><ul><li><p><code>着色器</code> 与 <code>纹理包</code> 是不同的概念。</p></li><li><p>作为纹理包，其能实现的主要功能即<strong>纹理的替换</strong>。</p></li><li><p>假若通过一些 <code>特殊手段</code>（如修改雾气）使其表现出<strong>如同被着色器渲染出的效果</strong>，最终结果也是极其的勉强。</p></li><li><p>而实际上，<code>着色器</code> 支持的功能远不止这些。要达到 <code>伪</code> 的级别，也应当将一个着色器能实现的<strong>大部分效果</strong>复现出来，包括<code>光照</code>、<code>阴影</code>、<code>大气</code>、<code>水波</code>等<strong>主要场景因素</strong>。</p></li><li><p>显然，想要在一个主要功能为 <code>替换贴图</code> 的纹理包去实现这些效果<strong>并不现实</strong>。</p></li></ul>',18);function v(m,S){const c=l("ExternalLinkIcon");return r(),n("div",null,[a,o("ul",null,[o("li",null,[p,o("ul",null,[g,o("li",null,[u,o("ul",null,[h,o("li",null,[o("p",null,[e("如果出现该类问题，请前往 "),o("a",x,[e("MGC 快速答疑手册——Java版着色器(Shader)"),t(c)]),e(" 寻找可能的解决方式。")])])])]),f])])]),_])}const b=i(s,[["render",v],["__file","shader.html.vue"]]);export{b as default};
