import{_ as s,r as e,o as l,c as i,a as o,b as r,d as n,e as g}from"./app-79fa02e8.js";const c={},d=o("h1",{id:"大众科普",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#大众科普","aria-hidden":"true"},"#"),r(" 大众科普")],-1),a=o("h2",{id:"导言",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#导言","aria-hidden":"true"},"#"),r(" 导言")],-1),u=o("p",null,"这份文档对社区内常见的图形学知识进行了总结，如果对图形学概念不了解或模糊，请阅读本文。",-1),h=o("strong",null,"本文仅供科普，不作实际教学",-1),p={href:"https://pd.qq.com/s/bk3goy6tk",target:"_blank",rel:"noopener noreferrer"},_=o("strong",null,"#🤯茶匙的图形学科普",-1),L=g('<p>这些文章目前<strong>正在重写</strong>中，目前的版本和重写中可能存在一些疏漏或者格式错误。</p><h2 id="基本术语" tabindex="-1"><a class="header-anchor" href="#基本术语" aria-hidden="true">#</a> 基本术语</h2><p>这些名词和概念贯穿全文，了解它们可以帮助你更流畅地阅读。 我们只解释术语的<strong>含义</strong>，<strong>不会</strong>过于涉及其中的算法原理。</p><h3 id="计算机术语" tabindex="-1"><a class="header-anchor" href="#计算机术语" aria-hidden="true">#</a> 计算机术语</h3><ul><li><strong>像素</strong> (Pixel)：二维位图的<strong>最小显示</strong>单位。 <ul><li>在实际渲染或计算中，有<strong>子像素</strong>（Sub-Pixel）的概念，因此像素仅为位图的最小显示单位。</li></ul></li><li><strong>体素</strong> (Voxel)：对应像素的定义，作为一种三维图形的表示方法，在此类空间中定义的三维图像，体素是<strong>最小坐标</strong>单位。</li><li><strong>位图</strong>（标量图）：最小单位为像素的图像。计算机中存储的图片<strong>大多是位图</strong>，如 <code>.jpg</code> 、 <code>.png</code> 、 <code>.bmp</code> 等。</li><li><strong>矢量图</strong>：由<strong>顶点</strong>位置和连接顶点的<strong>线段</strong>信息所组成的图像。 <code>.svg</code> 就是其中一种矢量图格式。</li><li><strong>颜色通道</strong>：在 <code>RGBA模式</code> 下由 <code>R</code> 、 <code>G</code> 、 <code>B</code> 、 <code>A</code> 四个通道构成<strong>光学三原色</strong>和<strong>不透明度</strong>。在没有特别注释的情况下，我们仅讨论 <code>RGBA</code> 情况。 <ul><li><code>R</code> ：Red，红色通道。</li><li><code>G</code> ：Green，绿色通道。</li><li><code>B</code> ：Blue，蓝色通道。</li><li><code>A</code> ：Alpha，希腊首字母α，在计算机图形中表示不透明度通道。</li></ul></li><li><strong>部分 <code>代码块内容</code> 的阅读方法</strong>: <ul><li><code>&lt;尖括号&gt;</code>：由尖括号&lt; &gt;括起来的内容表示在这个区域内应该填写的内容。例：<code>&lt;文件名&gt;.jpg</code> ，其中“&lt;文件名&gt;”可以使用任意<strong>符合尖括号内定义</strong>的内容替换，如 <code>图片.jpg</code>。</li></ul></li></ul><h3 id="游戏术语" tabindex="-1"><a class="header-anchor" href="#游戏术语" aria-hidden="true">#</a> 游戏术语</h3><ul><li><strong>JE</strong>：Minecraft Java Edition，即Java版游戏，在本文档中，也可以表示只能在<strong>Java版的光影模组</strong>下运行。</li><li><strong>BE</strong>：Minecraft Bedrock Edition，即基岩版游戏。 <ul><li>这里面也包含了原本的<strong>PE</strong>，即Pocket Edition版本。</li></ul></li></ul><p>自此开始无特殊说明的名词均为JE特有。</p><ul><li><strong>模组</strong>：MOD，由<strong>第三方提供</strong>的接口在原版游戏基础上运行<strong>由玩家编写的扩展内容</strong>，目前主流的接口有 <code>Forge</code> 和 <code>Fabric</code>，此外还有 <code>Fabric</code> 的分支版本 <code>Quilt</code> 以及自 <code>JE 1.12.2</code> 停止更新的 <code>LiteLoader</code> 。</li><li><strong>数据包</strong>：Datapack， <code>JE 1.13</code> 加入的<strong>由官方支持</strong>的可以修改<strong>世界内数据</strong>的文件包，自 <code>JE 1.16-pre1</code> 起可以在创建世界之前加载数据包。</li><li><strong>整合包</strong>：Modpack，由多个模组整合而成的文件包。 <ul><li>国内的整合包通常是<strong>懒人包</strong>，即：将游戏本体、启动器、模组以及其他配置和资源文件打包，玩家解压之后即可启动游玩。</li><li>国外标准的整合包是 <code>CurseForge</code> 格式，这种整合包只包含了需要调用的模组的信息，在诸如 <code>MultiMC</code> 等启动器上<strong>在线</strong>安装好后即可启动，这通常需要<strong>正版</strong>账户，由启动器在安装过程中同时下载游戏本体。 <ul><li>国内的启动器如 <code>HMCL</code> 、 <code>PCL 2</code> 、 <code>BakaXL</code> 等启动器也均跟进支持了此格式，此外， <code>HMCL</code> 还提供了自己的整合包格式。</li></ul></li></ul></li><li><strong>GLSL Shader Core</strong>：光影核心模组，<strong>最早</strong>的JE光影模组。</li><li><strong>OptiFine</strong>：即高清修复，<strong>简称OF</strong>，老牌JE优化模组。 <ul><li>最早是提供更大纹理分辨率支持的模组，这也是中文名被翻译为高清修复的原因。</li><li>在 <code>JE 1.8</code> 之后整合了 <code>GLSL Shader Core</code> ，开始提供光影支持。</li><li>在某一版本中整合了动态光源模组，让世界中所有的光源都可用于照明。</li></ul></li><li><strong>Sodium</strong>：意为“钠”，新兴优化模组，旨在优化 <code>JE 1.14</code> 后的游戏性能。 <ul><li>伴随钠出现的许多优化模组开始仿效使用元素周期表的元素来命名模组，被玩家们称为元素周期表全家桶。</li></ul></li><li><strong>Iris</strong>：新兴光影模组。由于 <code>OptiFine</code> 闭源导致很多模组无法兼容，而很多玩家想要在整合包中运行光影，Iris由此而生。 <ul><li>如今Iris已经在着手支持独占功能，并且与 <code>Sodium</code> 深度绑定。</li></ul></li></ul><h3 id="图形学术语" tabindex="-1"><a class="header-anchor" href="#图形学术语" aria-hidden="true">#</a> 图形学术语</h3><ul><li><strong>GLSL类型</strong>：这里列出了常用的GLSL数据类型 <ul><li><code>int</code> ：整数。</li><li><code>float</code> ：浮点数，计算机中可以表示小数的类型。</li><li><code>bool</code> ：布尔值，可以为 <code>true</code>(<code>1</code>) 或 <code>false</code>(<code>0</code>) 。</li><li><code>vecN</code> ：浮点向量，N可以为 <code>[1, 4]</code> 的整数，表示该向量的纬度。 <ul><li><code>ivecN</code> 为整数向量，<code>bvecN</code> 为布尔值向量。</li></ul></li><li><code>matN</code> <code>matNxM</code> ：浮点矩阵，N、M可以为 <code>[2, 4]</code> 的整数，表示该矩阵的大小。 <ul><li><code>matN</code> 表示 <code>N * N</code> 大小的矩阵， <code>matNxM</code> 表示 <code>N * M</code> 大小的矩阵。</li></ul></li><li><code>samplerND</code> ：采样用纹理，N可以为 <code>[1, 3]</code> ，表示该纹理的纬度。 <ul><li><code>samplerCube</code> ：六面包围盒式的采样用纹理。</li></ul></li></ul></li></ul><ul><li><strong>着色器</strong>：即光影。</li><li><strong>标量</strong>：也称数量，一个<strong>数字</strong>就是一个标量。</li><li><strong>向量</strong>：也称矢量，在标量的基础上还有<strong>方向</strong>。 <ul><li>在 <code>GLSL</code> 中，我们使用形如 <code>vec3(1.0, 0.2, 3.5)</code> 的方式来表示三维向量。</li></ul></li><li><strong>点乘</strong>：<strong>两个向量</strong>运算为一个标量，我们使用形如 <code>dot(vecA, vecB)</code> 的方法来表示点乘。</li><li><strong>向量/矩阵乘法</strong>：也称左乘，向量和矩阵之间的<strong>有序乘法</strong>。得出的值的类型与<strong>最右侧</strong>的值相同。 <ul><li>左乘的参数存在一些限制，不过这里不做深入。</li></ul></li><li><strong>OpenGL</strong>：Open Graphics Library，<strong>开源图形库</strong>，JE所使用的<strong>图形接口</strong>。 <ul><li><strong>GLSL</strong>：(Open) GL Shader Language，<strong>OpenGL着色语言</strong>，顾名思义，它是 <code>OpenGL</code> 的着色器语言。</li><li>其它的图形接口还有如 <code>Vulkan</code> ，它的着色器语言也是 <code>GLSL</code> ； <code>DirectX</code> ，它的着色器语言是<code>HLSL</code> (High-Level Shader Language)。</li></ul></li><li><strong>灰度图</strong>：仅由黑白灰组成的图片。</li><li><strong>深度图</strong>：Depth Map，表观为灰度图，每个像素的亮度说明了该处与摄像机之间的距离。</li><li><strong>阴影贴图</strong>：Shadow Map，其运作原理大致如下： <ol><li>从<strong>光源视角</strong>绘制深度图并<strong>投射到玩家视角</strong>的整个场景作为<strong>最近距离</strong>；</li><li>将其与玩家视角里每个像素<strong>实际到光源的距离</strong>做比较；</li><li>如果实际距离比最近距离更大，就是阴影。</li></ol><ul><li>由于其算法特性，<strong>精度</strong>与<strong>贴图大小</strong>直接挂钩，同时会<strong>大幅影响性能表现</strong>。</li></ul></li><li><strong>平行光源</strong>：也称无限光。距离玩家<strong>无穷远</strong>处的光源。 <ul><li>太阳和月亮的光照可以近似看作平行光。</li></ul></li><li><strong>点光源</strong>：从自身向所有方向发射光照的光源。 <ul><li>在MC中不存在严格意义上的点光源，但是 <code>OptiFine</code> 提供的<strong>动态光源</strong>和一些光影提供的<strong>手持光源</strong>可以被认为是点光源。</li></ul></li><li><strong>三角形和法线</strong>：Normal，除了前文所述的体素，图形学中还有一种<strong>对应矢量</strong>的渲染方法。 <ul><li>这种方法在渲染中更常用，其依赖于<strong>三角形</strong>或四边形（四边形在现代不常用）。</li><li>在计算机图形学中，三角形的三个顶点以<strong>逆时针</strong>顺序所形成的平面就是这个形状的<strong>正面</strong>（约定俗成） <ul><li><strong>垂直</strong>于这个面<strong>朝外</strong>的方向就是这个三角形的<strong>法线</strong>。</li></ul></li></ul></li><li><strong>法线贴图</strong>：Normal Map，偏移物体表面的朝向，这样就可以影响每个纹理像素的光照强度，从而产生<strong>额外的表面细节</strong>。 <ul><li>在计算机渲染中，我们通常使用法线信息与光源方向做<strong>点乘</strong> <code>dot(lightDir, Normal)</code> 来获得该像素的亮度，法线贴图在此时的作用就是偏移了前式中 <code>Normal</code> 这个量。所以实际上法线<strong>并没有真正偏移</strong>表面，而只是让该纹理像素的信息被改写。</li></ul></li><li><strong>POM</strong>：Parallax Occlusion Mapping，即视差遮蔽映射，简称<strong>视差</strong>。和法线相似，视差贴图通过偏移表面的<strong>深度</strong>来创造原本不存在的凹凸感。 <ul><li>视差也<strong>并没有真正扭曲</strong>表面，只是让玩家从<strong>不同角度</strong>感受到纹理上某些像素被其他像素<strong>遮挡</strong>，从而创造凹凸的观感，这也是其名字中“映射”的含义。</li></ul></li><li><strong>PBR</strong>：Physically-Based Rendering，即<strong>基于物理的渲染</strong>。 <ul><li>它是一种着色和渲染的方法，更<strong>准确</strong>地表现<strong>光线</strong>如何与<strong>材料性质</strong>相互作用。</li><li>它有一些传统着色中没有考虑到的部分，如<strong>能量守恒</strong>、<strong>光电效应</strong>等。</li></ul></li><li><strong>GI</strong>：Global Illumination，即<strong>全局光照</strong>。是直接光照和间接光照的集合。 <ul><li><strong>直接光照</strong>：由光源发射的光照。在<strong>OptiFine光影</strong>中，直接光照的光源<strong>有且仅有</strong>太阳和月亮。 <ul><li>我们把<strong>可以投射阴影贴图</strong>的光源称为直接光源。</li><li>更准确地说是太阳和月亮的<strong>方向</strong>。</li><li>Iris提供了一个新光影特性，让<strong>手持光源</strong>可以投射阴影贴图，因此手持光源也可以算作一个直接光源。</li></ul></li><li><strong>间接光照</strong>：直接光照经过反弹所照亮的不能被光源直接照射到的地方。</li></ul></li><li><strong>AO</strong>：Ambient Occlusion，即<strong>环境光遮蔽</strong>。由于性能问题，很多游戏中通常使用了各种<strong>欺诈和近似</strong>来模拟全局光照。为了让<strong>原本应该</strong>或者<strong>似乎应该</strong>为暗处的地方暗下去而产生的技术。</li><li><strong>SSS</strong>：此简写包含以下两种概念 <ul><li><strong>次表面散射</strong>：Sub-surface Scattering。模拟光线透过物体在其内部反射后射出的效果。 <ul><li><strong>散射</strong>是漫反射、镜面反射、次表面散射的集合。</li><li><strong>折射</strong>是散射的一个<strong>特解</strong>。</li></ul></li><li><strong>屏幕空间阴影</strong>：Screen-space Shadow。由于阴影贴图的<strong>精度不足</strong>，容易在物体与地面接触的边缘产生<strong>锯齿和偏移</strong>，屏幕空间阴影就是用于这些地方来<strong>补足</strong>阴影的效果，因此也称为<strong>接触阴影</strong> (Contact Shadow)。</li></ul></li></ul><h2 id="计算机图形学-computer-graphics" tabindex="-1"><a class="header-anchor" href="#计算机图形学-computer-graphics" aria-hidden="true">#</a> 计算机图形学（Computer Graphics）</h2>',13),m={href:"http://staff.ustc.edu.cn/~lgliu/Resources/CG/What_is_CG.htm",target:"_blank",rel:"noopener noreferrer"};function f(S,b){const t=e("ExternalLinkIcon");return l(),i("div",null,[d,a,u,o("p",null,[r("善用目录来检索你所想要了解的知识，"),h,r("，如需学习可前往子频道 "),o("a",p,[_,n(t)]),r(" 寻求建议。")]),L,o("p",null,[r("中国科学技术大学图形与几何计算实验室给予了比较明确的定义和解释。 请参阅此文档："),o("a",m,[r("什么是计算机图形学"),n(t)])])])}const N=s(c,[["render",f],["__file","index.html.vue"]]);export{N as default};
