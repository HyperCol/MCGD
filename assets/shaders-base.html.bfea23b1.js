import{_ as a,o as e,c as r,e as i}from"./app.1f555382.js";const n={},o=i('<h1 id="着色器基础概念" tabindex="-1"><a class="header-anchor" href="#着色器基础概念" aria-hidden="true">#</a> 着色器基础概念</h1><h2 id="关于-java-版渲染模组" tabindex="-1"><a class="header-anchor" href="#关于-java-版渲染模组" aria-hidden="true">#</a> 关于 Java 版渲染模组</h2><h3 id="主要渲染模组" tabindex="-1"><a class="header-anchor" href="#主要渲染模组" aria-hidden="true">#</a> 主要渲染模组</h3><ul><li><strong><code>OptiFine</code> 是 Minecraft Java 版的一个 Mod</strong>。其主要功能是加载光影包、性能优化与一些渲染改进功能，为玩家获得更好的视觉体验。你可能也听说过 ShadersMod 或光影核心，但请勿再使用它。 ShadersMod 已经过期已久，因为 OptiFine 已经将它集成进代码，并接管了它的后续更新工作，而且现在的 OptiFine 有许多原来的 ShadersMod 所没有的新功能。几乎所有的现代光影包都使用了这些新功能（这些光影包往往不再适用于 ShadersMod） 。</li><li><strong><code>Iris</code> 是 OptiFine 的衍生物</strong>。其自身开源，与 Sodium（钠）模组共同开启时可以获得更好的游玩体验，同时为了 Fabric 模组加载器社区的模组兼容性而生。但其开发方向与 OptiFine 相反（适配现有的光影，不追求新效果新光影），而光影的开发是与 Optfine 或 Canvas 同向的。因此未来一段时间内，我们仍然需要 OptiFine 或 Canvas 作为光影的主体 API，不可能直接替换为 Iris 。</li><li><strong><code>Canvas</code> 是基于 Fabric API 的一个渲染 Mod</strong>。其主要功能是为模组开发者提供更好的渲染体验，但其也适用于开发光影包。Canvas 通过深度结合 Fabric API 的独立渲染API以及原版着色器，来达到比 Optifine 更多的可能性，以及 Iris 都无法匹敌的模组兼容性。但因其主要为模组开发而生，渲染管线极为复杂，学习成本非常高，导致目前基于 Canvas 开发光影的创作者极少。</li></ul><h3 id="其他渲染模组" tabindex="-1"><a class="header-anchor" href="#其他渲染模组" aria-hidden="true">#</a> 其他渲染模组</h3><ul><li><strong><code>Blaze4D</code> 是一个目前基于 Fabric API 的实验性项目，使用 Vulkan API</strong> 。与 OptiFine 或 Iris 不同，它不是一个优化mod。虽然它进行了一定的性能改进，但远不及 OptiFine 与 Iris 。值得一提的是，Blaze4D 唯一真正制作的优化工作是 baked-entity-models 烘焙实体模型，并将其提交给了 Sodium 供所有人使用**。Blaze4D 未来将允许开发者将 DLSS 或 FSR 、硬件加速光线追踪引入到光影开发中**。当然，这些功能目前还是有生之年系列。</li><li><strong><code>Focal</code> 是由 Continuum 光影团队开发的一个基于 Vulkan API 的独立光影渲染模组，基于 Forge 或 Fabric</strong>。目前其专用于 Continuum 2.1/RT 光影。主要目的是借助 Vulkan 编写光影来获得更高的效率、更多的渲染空间乃至<strong>实现硬件光追</strong>（有生之年系列×2）。同时还可以帮助光影作者实现光影加密和联网验证。</li><li><strong><code>Vulkan Mod</code>是一个基于 Fabric 的模组，将 MC 的渲染API换为 Vulkan ，借此提高帧数</strong>。目前存在较多bug与兼容性问题，并不支持光影。</li></ul><h3 id="关于基岩版光影与-renderdragon" tabindex="-1"><a class="header-anchor" href="#关于基岩版光影与-renderdragon" aria-hidden="true">#</a> 关于基岩版光影与 RenderDragon</h3><ul><li><strong>首先明确一个概念，光影属于着色器，并非基岩版光影没有动态的光线与鲜明的阴影就叫着色器而非光影</strong>。基岩版光影基于Opengl ES中的GLSL或HLSL。由于接口限制，基岩版光影可以实现的效果非常少，但仍可以通过一系列稀奇古怪的方法实现物理渲染体系。</li><li>**什么是接口（API）？**简单来说，你需要游戏有对应接口才能接入对应算法。具象化来说，这就好比你要给你的手机（游戏本体）扩展存储（想要达到的光影效果），你需要SD卡（算法），并且手机需要有SD卡槽（接口）你才能插入。至于我们为什么不能自己加接口，因为基岩版基于C++，反编译（可以获取到游戏源码，JE的模组API就靠这个）极其困难，几乎不可能实现，没有人成功过。</li><li><strong>渲染龙引擎（RenderDragon）是微软官方在基岩版Minecraft实装的渲染引擎</strong>。目前，渲染龙已覆盖到了Windows、Xbox、Android等多平台的基岩版Minecraft上，替代了原本第三方着色器的光照方案。其中，Windows版本能够通过调用RTX或RX6000以上系列显卡的光线追踪加速单元以提升光线追踪的效率，而其他平台上的引擎能够起到优化作用。<s>意外的是，渲染龙一开始是给Java版Minecraft设计的，而且渲染龙目前只会起到负优化作用。</s></li><li><strong>渲染龙的引入并不一定是正向的</strong>，渲染龙目前在多个平台上表现为负优化，例如操作、渲染延迟等，且帧数并不一定有提升。渲染龙的算法加密破坏了很多东西，除了光影还有例如区块显示、红石能量显示、亮度显示、夜视、透视、小地图等，这些都是由第三方光影实现的，这会给红石玩家等带来不少困扰。而且官方光追虽然在光追方面技术力高，但其在细节调校方面做的非常差劲，整个世界都跟涂了油一样，可能还不如第三方光影，会对主打真实风格的地图与材质作者造成很大困扰，并且手机版也无光追可用，导致直接光影灭绝。这也是我们目前为什么反对渲染龙的原因，在此希望大家可以<strong>理性看待渲染龙，而非一味吹捧</strong>。</li><li>**2022下半年更新：**渲染龙及RTX已被破解，但由于破解团队收到微软的DMCA致函（你可以理解为类似律师函，只是警告），以及新的光影编写方案过于困难，目前BE版光影仍处于半死不活的状态。</li></ul><h3 id="关于网易的be后处理着色器" tabindex="-1"><a class="header-anchor" href="#关于网易的be后处理着色器" aria-hidden="true">#</a> 关于网易的BE后处理着色器</h3><p>（待编写）</p>',10),d=[o];function s(t,l){return e(),r("div",null,d)}const h=a(n,[["render",s],["__file","shaders-base.html.vue"]]);export{h as default};
