import{_ as s,r as e,o as g,c as l,a as o,b as r,d as n,e as i}from"./app-c3fb105e.js";const d={},c=o("h1",{id:"大众科普",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#大众科普","aria-hidden":"true"},"#"),r(" 大众科普")],-1),a=o("h2",{id:"导言",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#导言","aria-hidden":"true"},"#"),r(" 导言")],-1),h=o("p",null,"这份文档对社区内常见的图形学知识进行了总结，如果对图形学概念不了解或模糊，请阅读本文。",-1),u=o("strong",null,"本文仅供科普，不作实际教学",-1),p={href:"https://pd.qq.com/s/bk3goy6tk",target:"_blank",rel:"noopener noreferrer"},_=o("strong",null,"#🤯茶匙的图形学科普",-1),f=i('<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>这些名词和概念贯穿全文，了解它们可以帮助你更流畅地阅读。</p><h3 id="计算机概念" tabindex="-1"><a class="header-anchor" href="#计算机概念" aria-hidden="true">#</a> 计算机概念</h3><ul><li><strong>像素</strong>（Pixel）：二维位图的<strong>最小显示</strong>单位。 <ul><li>在实际渲染中，有<strong>子像素</strong>（Sub-Pixel）的概念，因此像素仅为位图的最小显示单位。</li></ul></li><li><strong>体素</strong>（Voxel）：对应像素的定义，作为一种三维图形的表示方法，在此类空间中定义的三维图像，体素是<strong>最小坐标</strong>单位。</li><li><strong>位图</strong>（标量图）：最小单位为像素的图像。计算机中存储的图片<strong>大多是位图</strong>，如 <code>.jpg</code> 、 <code>.png</code> 、 <code>.bmp</code> 等。</li><li><strong>矢量图</strong>：由<strong>顶点</strong>位置和连接顶点的<strong>线段</strong>信息所组成的图像。 <code>.svg</code> 就是其中一种矢量图格式。</li><li><strong>颜色通道</strong>：在 <code>RGBA模式</code> 下由 <code>R</code> 、 <code>G</code> 、 <code>B</code> 、 <code>A</code> 四个通道构成<strong>光学三原色</strong>和<strong>不透明度</strong>。在没有特别注释的情况下，我们仅讨论 <code>RGBA</code> 情况。 <ul><li><code>R</code> ：Red，红色通道。</li><li><code>G</code> ：Green，绿色通道。</li><li><code>B</code> ：Blue，蓝色通道。</li><li><code>A</code> ：Alpha，希腊首字母α，在计算机图形中表示不透明度通道。</li></ul></li><li><strong>部分 <code>代码块内容</code> 的阅读方法</strong>: <ul><li><code>&lt;尖括号&gt;</code>：由尖括号&lt; &gt;括起来的内容表示在这个区域内应该填写的内容。例：<code>&lt;文件名&gt;.jpg</code> ，其中“&lt;文件名&gt;”可以使用任意的内容替换，如 <code>图片.jpg</code>。</li></ul></li></ul><h3 id="游戏概念" tabindex="-1"><a class="header-anchor" href="#游戏概念" aria-hidden="true">#</a> 游戏概念</h3><ul><li><strong>JE</strong>：Minecraft Java Edition，即Java版游戏。</li><li><strong>BE</strong>：Minecraft Bedrock Edition，即基岩版游戏。 <ul><li>这里面也包含了原本的<strong>PE</strong>，即Pocket Edition版本。</li></ul></li><li><strong>整合包</strong>：Modpacks，由多个模组整合而成的文件包。 <ul><li>国内的整合包通常是<strong>懒人包</strong>，即：将游戏本体、启动器、模组以及其他配置和资源文件打包，玩家解压之后即可启动游玩。</li><li>国外标准的整合包是 <code>CurseForge</code> 格式，这种整合包只包含了需要调用的模组的信息，在诸如 <code>MultiMC</code> 等启动器上<strong>在线</strong>安装好后即可启动，这通常需要<strong>正版</strong>游戏。 <ul><li>国内的启动器如 <code>HMCL</code> 、 <code>PCL 2</code> 、 <code>BakaXL</code> 等启动器也均跟进支持了此格式，此外， <code>HMCL</code> 还提供了自己的整合包格式。</li></ul></li></ul></li><li><strong>GLSL Shader Core</strong>：光影核心模组，<strong>最早</strong>的JE光影模组。</li><li><strong>OptiFine</strong>：即高清修复，<strong>简称OF</strong>，老牌JE优化模组。最早是提供更大纹理分辨率支持的模组，这也是中文名被翻译为高清修复的原因；在 <code>JE 1.8</code> 之后整合了 <code>GLSL Shader Core</code> 模组，开始提供光影支持。</li><li><strong>Iris</strong>：新兴光影模组。由于OptiFine闭源导致很多模组无法兼容，而很多玩家想要在模组包</li></ul><h3 id="图形学概念" tabindex="-1"><a class="header-anchor" href="#图形学概念" aria-hidden="true">#</a> 图形学概念</h3><ul><li><strong>法线</strong>：Normal，除了前文所述的体素，图形学中还有一种对应矢量的渲染方法。这种方法在渲染中更常用，其依赖于<strong>三角形</strong>。在计算机图形学中，三角形的三个顶点以<strong>逆时针</strong>顺序所形成的平面就是这个形状的<strong>正面</strong>^约定俗成^，而<strong>垂直</strong>于这个面<strong>朝外</strong>的方向就是这个三角形的法线。</li><li><strong>POM</strong>：Parallax Occlusion Mapping，即<strong>视差遮蔽映射</strong>，简称视差。和法线相似，视差贴图通过偏移表面的<strong>深度</strong>来创造原本不存在的凹凸感。视差事实上并<strong>没有真正扭曲</strong>表面，而只是创造凹凸的观感让玩家从<strong>不同角度</strong>能感受到纹理上某些像素被其他像素<strong>遮蔽</strong>，这也是其名字中“映射”的意思。</li><li><strong>PBR</strong>：Physically-Based Rendering，即<strong>基于物理的渲染</strong>。它是一种着色和渲染的方法，更<strong>准确</strong>地表现<strong>光线</strong>如何与<strong>材料性质</strong>相互作用。它有一些传统着色中没有考虑到的部分，如<strong>能量守恒</strong>、<strong>光电效应</strong>等。</li><li><strong>GI</strong>：Global Illumination，即<strong>全局光照</strong>。直接光照和间接光照的合集。 <ul><li><strong>直接光照</strong>：由光源发射的光照。在<strong>MC光影</strong>中，直接光照的光源<strong>有且仅有</strong>太阳和月亮。 <ul><li>更准确地说是太阳和月亮的方向。</li></ul></li><li><strong>间接光照</strong>：直接光照经过反弹所照亮的不能被光源直接照射到的地方。</li></ul></li><li><strong>AO</strong>：Ambient Occlusion，即<strong>环境光遮蔽</strong>。由于性能问题，间接光照在很多游戏中通常使用了各种<strong>欺诈和近似</strong>来模拟全局光照。为了让<strong>原本应该</strong>或者<strong>似乎应该</strong>为暗处的地方暗下去而产生的技术。</li><li><strong>SSS</strong>：此简写包含以下两种概念 <ul><li><strong>次表面散射</strong>：Sub-surface Scatter。模拟光线透过物体在其内部反射后射出的效果。 <ul><li><strong>折射</strong>是次表面散射的一个<strong>特解</strong>。</li></ul></li><li><strong>屏幕空间阴影</strong>：Screen-space Shadow。由于阴影贴图的<strong>精度不足</strong>，容易在物体与地面接触的边缘产生<strong>锯齿和偏移</strong>，屏幕空间阴影就是用于这些地方来<strong>补足</strong>阴影的效果，因此也称为<strong>接触阴影</strong> (Connected Shadow)。</li></ul></li></ul><h2 id="计算机图形学-computer-graphics" tabindex="-1"><a class="header-anchor" href="#计算机图形学-computer-graphics" aria-hidden="true">#</a> 计算机图形学（Computer Graphics）</h2>',9),x={href:"http://staff.ustc.edu.cn/~lgliu/Resources/CG/What_is_CG.htm",target:"_blank",rel:"noopener noreferrer"};function m(b,S){const t=e("ExternalLinkIcon");return g(),l("div",null,[c,a,h,o("p",null,[r("善用目录来检索你所想要了解的知识，"),u,r("，如需学习可前往子频道 "),o("a",p,[_,n(t)]),r(" 寻求建议。")]),f,o("p",null,[r("中国科学技术大学图形与几何计算实验室给予了比较明确的定义和解释。 请参阅此文档："),o("a",x,[r("什么是计算机图形学"),n(t)])])])}const C=s(d,[["render",m],["__file","index.html.vue"]]);export{C as default};
