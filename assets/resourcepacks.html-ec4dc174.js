import{_ as a,r as l,o as i,c as s,a as e,b as t,d,w as r,e as o}from"./app-20459822.js";const g={},h=e("h1",{id:"资源包相关",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#资源包相关","aria-hidden":"true"},"#"),t(" 资源包相关")],-1),u=o(`<h2 id="写在前面" tabindex="-1"><a class="header-anchor" href="#写在前面" aria-hidden="true">#</a> 写在前面</h2><h3 id="关于资源包、纹理包和材质包" tabindex="-1"><a class="header-anchor" href="#关于资源包、纹理包和材质包" aria-hidden="true">#</a> 关于资源包、纹理包和材质包</h3><ul><li><strong>纹理包</strong>：Texture Pack，是 <code>JE 1.6.1</code> 以前所使用的用于自定义游戏<strong>纹理</strong>的文件包的<strong>正确译名</strong>。</li><li><strong>材质包</strong>：Texture Pack的<strong>错误译名</strong>。 <ul><li>在英文语境中，<strong>材质</strong>所对应的英文单词为<strong>Material</strong>，在图形学中这用于描述物体的属性，如 <code>金属性</code> 、<code>光滑度</code> 、<code>自发光强度</code> 等。</li><li>而<strong>纹理</strong>所对应的英文单词<strong>Texture</strong>，这才是用于描述物体表面颜色的单词。</li></ul></li><li><strong>资源包</strong>：Resource Pack，是 <code>JE 1.6.1</code> 及以后使用的用于自定义游戏的<strong>纹理</strong>、<strong>声音</strong>、<strong>模型</strong>，乃至<strong>渲染</strong>的文件包。</li></ul><p>截至 <code>JE 1.6</code> ，这个译名在游戏内仍旧没有修改，于是此翻译便流传了下来，并<strong>逐渐波及相关领域</strong>，现在 <code>Minecraft 中文Wiki</code> 已经将此翻译纠正，希望大家在以后的谈论中尽量<strong>使用正确的译名</strong>。</p><p>在本文中，我们将会全程使用<strong>资源包</strong>。</p><h2 id="分辨率" tabindex="-1"><a class="header-anchor" href="#分辨率" aria-hidden="true">#</a> 分辨率</h2><p>很多资源包名中会附带有一个标注，通常是类似 <code>32x</code> 、<code>256x</code> 、<code>2k</code> 这样的数字+字母格式。 这是资源包纹理的<strong>分辨率</strong>，这里稍作解释：</p><h3 id="通常意义上的分辨率" tabindex="-1"><a class="header-anchor" href="#通常意义上的分辨率" aria-hidden="true">#</a> 通常意义上的分辨率</h3><ul><li>视频文件中常用的分辨率 <code>1080p</code> 意为 <code>纵向 1080px</code> 、<code>逐行扫描</code> 。 <ul><li><code>px</code> 为像素的缩写。</li><li><code>p</code> 意为 <code>逐行扫描</code> ，而 <code>i</code> 则为 <code>隔行扫描</code> 。 <ul><li>这和本教程关联性不大，这里略去不表。</li></ul></li><li>伴随此种简写的分辨率出现的还常有 <code>画面比例</code> 。</li><li>你可以使用这个公式来横向分辨率 $$ 纵向分辨率 \\times 画面比例 = 横向分辨率 $$ 例如：显示器常用的比例 <code>16:9</code> 在纵向分辨率为 <code>1080px</code> 的情况下，横向分辨率为 $ 1080\\text{px} \\times \\frac{16}{9} = 1920\\text{px} $ ，则屏幕分辨率为 <code>1920*1080</code> 。</li></ul></li><li><code>2k</code> 、<code>4k</code> 的定义： <ul><li>由横向分辨率决定，<code>k</code>的换算公式为 $$ 1\\text{kpx} = 1024\\text{px} = 2^{10}\\text{px} $$</li><li>标准的4k分辨率为 <code>4096*2160</code> ，在 <code>16:9</code> 下为 <code>3840*2160</code> 。</li><li>严格意义上来说 <code>2k</code> 的标准分辨率为 <code>2048*1080</code> ，也就是上文 <code>1080p 16:9</code> 在标准情况下的分辨率。 <ul><li>但是现在<strong>通俗意义上</strong>的2k分辨率是 <code>1440p 16:9</code> ，也就是 <code>2560*1440</code> ，但这个分辨率实际上是 <code>2.5k</code> 。</li></ul></li></ul></li><li>分辨率越高，画面精细度就越高。</li></ul><h3 id="资源包中的分辨率" tabindex="-1"><a class="header-anchor" href="#资源包中的分辨率" aria-hidden="true">#</a> 资源包中的分辨率</h3><p>资源包中的纹理通常为<strong>正方形</strong>，在<strong>动态纹理贴图</strong>中，纵向分辨率是横向分辨率的<strong>整数倍</strong>。这使得纹理的分辨率标注相比较通常意义上有一些区别</p><ul><li><code>32x</code> 、<code>64x</code> 、<code>128x</code> ... <code>Nx</code> ：表示该资源包的所有贴图均为 $N\\text{px} \\times N\\text{px}$ 的尺寸（在动态纹理贴图中，纵向分辨率还需要乘以 $F$ ，这个参数是动态纹理的<strong>帧数</strong>）。 <ul><li><code>x</code> 通常用于表示乘号，这里是 $\\text{N} \\times \\text{N}$ 的简写。</li></ul></li><li><code>1k</code> 、<code>2k</code> 、<code>4k</code> ... <code>Nk</code> ：表示所有贴图均为 <code>Nk*Nk</code> 像素的尺寸。<code>k</code> 的转换公式遵循上文。</li><li><code>N</code> 在JE中必定为<strong>2的整数倍</strong>。</li></ul><h2 id="资源包的版本兼容性-je" tabindex="-1"><a class="header-anchor" href="#资源包的版本兼容性-je" aria-hidden="true">#</a> 资源包的版本兼容性^JE^</h2><h3 id="粗略的兼容范围" tabindex="-1"><a class="header-anchor" href="#粗略的兼容范围" aria-hidden="true">#</a> 粗略的兼容范围</h3><p>在 <code>JE 1.13</code> 时，Mojang进行了一轮游戏代码重写，这一次重写包含了一次对方块ID和命名方法的修改，称为<strong>扁平化</strong>，这也导致了自 <code>JE 1.13</code> 开始，资源包的兼容性出现了断层：</p><table><thead><tr><th style="text-align:center;">兼容范围</th></tr></thead><tbody><tr><td style="text-align:center;"><code>1.6.1</code> ~ <code>1.12.2</code></td></tr><tr><td style="text-align:center;"><code>1.13</code> +</td></tr></tbody></table><p>对于<strong>大部分</strong>的资源包，只需要选择在<strong>两个区间内</strong>的<strong>任意一个版本</strong>，即可正常加载。</p><h3 id="准确的兼容范围" tabindex="-1"><a class="header-anchor" href="#准确的兼容范围" aria-hidden="true">#</a> 准确的兼容范围</h3><p>虽然在粗略兼容区间内，但是有时候资源包列表仍然会标红且提示 <code>适用于&lt;新/旧&gt;版本的Minecraft</code> ，这是因为实际上资源包的区间分为更复杂的许多段。</p><h4 id="pack-mcmeta" tabindex="-1"><a class="header-anchor" href="#pack-mcmeta" aria-hidden="true">#</a> pack.mcmeta</h4><p>版本区间由资源包内一个名为 <code>pack.mcmeta</code> 的文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;pack&quot;: {
    &quot;pack_format&quot;: N,
    &quot;description&quot;: &quot;...&quot;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中的 <code>pack_format</code> 版本号 <code>N</code> 定义。<code>descripton</code> 则是该资源包的<strong>描述</strong>。</p><p>以下是截止 <code>JE 1.20</code> 的版本号与对应版本的表格：</p><table><thead><tr><th style="text-align:center;"><code>N</code></th><th style="text-align:center;">起始版本</th><th style="text-align:center;">终止版本</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;"><code>1.6.1 13w24a</code></td><td style="text-align:center;"><code>1.8.9</code></td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;"><code>1.9 15w31a</code></td><td style="text-align:center;"><code>1.10.2</code></td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;"><code>1.11 16w32a</code></td><td style="text-align:center;"><code>1.12.2 17w47b</code></td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;"><code>1.13 17w48a</code></td><td style="text-align:center;"><code>1.14.4 19w46b</code></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;"><code>1.15-pre1</code></td><td style="text-align:center;"><code>1.16.2-pre3</code></td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;"><code>1.16.2-rc1</code></td><td style="text-align:center;"><code>1.16.5</code></td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;"><code>1.17 20w45a</code></td><td style="text-align:center;"><code>1.17.1 21w38a</code></td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;"><code>1.18 21w39a</code></td><td style="text-align:center;"><code>1.18.2</code></td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;"><code>1.19 22w11a</code></td><td style="text-align:center;"><code>1.19.2</code></td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;"><code>1.19.3 22w42a</code></td><td style="text-align:center;"><code>1.19.3 22w44a</code></td></tr><tr><td style="text-align:center;">12</td><td style="text-align:center;"><code>1.19.3 22w45a</code></td><td style="text-align:center;"><code>1.19.4 23w07a</code></td></tr><tr><td style="text-align:center;">13</td><td style="text-align:center;"><code>1.19.4-pre1</code></td><td style="text-align:center;"><code>1.20 23w13a</code></td></tr><tr><td style="text-align:center;">14</td><td style="text-align:center;"><code>1.20 23w14a</code></td><td style="text-align:center;"><code>1.20 23w16a</code></td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;"><code>1.20 23w17a</code></td><td style="text-align:center;">最新版</td></tr></tbody></table><p>从 <code>1.15</code> 开始，版本之间只要存在不兼容的地方，官方就会更新资源包版本号。</p><ul><li>例如 <code>1.15</code> 与 <code>1.16</code> 之间更新了墙类方块的方块状态，即便有些资源包并未涉及此内容，只要 <code>pack.mcmeta</code> 内的版本号不同，游戏内依然会显示不兼容。</li><li>因此资源包的兼容性在绝大多数下应以<strong>作者本人的解释为标准</strong>，而不是游戏内是否显示不兼容。</li></ul><h2 id="资源包加载顺序" tabindex="-1"><a class="header-anchor" href="#资源包加载顺序" aria-hidden="true">#</a> 资源包加载顺序</h2><p>资源包加载顺序为<strong>由低到高</strong>。即</p><ul><li>放置在<strong>顶部</strong>的资源包在加载时会覆盖下方资源包中重名的文件。</li><li>顶部资源包缺失的贴图，将由下方资源包补齐。</li></ul><p>因此一些由 <code>基础包</code>+<code>增强包/附属包</code>(通常名为Addon) 组合形式的资源包，应把基础包置于<strong>底部</strong>。</p><h2 id="贴图类型" tabindex="-1"><a class="header-anchor" href="#贴图类型" aria-hidden="true">#</a> 贴图类型</h2><h3 id="原版贴图" tabindex="-1"><a class="header-anchor" href="#原版贴图" aria-hidden="true">#</a> 原版贴图</h3><p>原版贴图名称一般为 <code>&lt;name&gt;.png</code> 。</p><p>原版贴图由 Minecraft 原生提供支持。许多老牌资源包如 <code>舒服细致</code>(Soartex) 、<code>五边形</code>(BDCraft) 等即为只提供原版贴图的资源包。</p><h3 id="着色贴图-je" tabindex="-1"><a class="header-anchor" href="#着色贴图-je" aria-hidden="true">#</a> 着色贴图^JE^</h3><p><strong>这些贴图需要光影的支持。</strong> 着色贴图有 <code>反射贴图</code>(specular map) 和 <code>法线贴图</code>(normal map) 两种。</p><ul><li><code>法线贴图</code> 的命名方法为 <code>&lt;name&gt;_n.png</code> 。</li><li><code>反射贴图</code> 的命名方法为 <code>&lt;name&gt;_s.png</code> 。</li></ul><p>OptiFine 同时支持一些其它的特殊贴图，如 <code>CTM</code> 、<code>CIT</code> 、<code>CEM</code> 等。简述见 <a href="#%E7%89%B9%E6%AE%8A%E8%B4%B4%E5%9B%BE-optifine">#特殊贴图</a> 。</p><h4 id="法线贴图" tabindex="-1"><a class="header-anchor" href="#法线贴图" aria-hidden="true">#</a> 法线贴图</h4>`,40),x=o('<p>这里列出了每个通道的作用：</p><ul><li><code>R</code> ：表面<strong>向右</strong>倾斜的量。</li><li><code>G</code> ：表面<strong>向下</strong>倾斜的量。</li><li><code>B</code> ：表面<strong>向前</strong>的量。这个量通常由R和G决定，在JE现行PBR标准中有特殊用法，详见 <a href="#pbr%E6%A0%87%E5%87%86">#PBR标准</a> 。</li><li><code>A</code> ：通常用于<strong>视差</strong>。</li></ul><p>RG分量的作用<strong>由 <code>OpenGL</code> 的特性决定</strong>，如果要改为其他读取方式，需要做一些<strong>转换</strong>。</p><h4 id="反射贴图" tabindex="-1"><a class="header-anchor" href="#反射贴图" aria-hidden="true">#</a> 反射贴图</h4><p>用于告诉着色器物体的性质，每个颜色通道在不同的标准中有着不同的定义，详见 <a href="#pbr%E6%A0%87%E5%87%86">#PBR标准</a> 。</p><h3 id="特殊贴图-optifine" tabindex="-1"><a class="header-anchor" href="#特殊贴图-optifine" aria-hidden="true">#</a> 特殊贴图^OptiFine^</h3><table><thead><tr><th>名称</th><th style="text-align:center;">简写</th><th>用途</th></tr></thead><tbody><tr><td>Connected Textures Model</td><td style="text-align:center;">CTM</td><td>方块间的纹理衔接</td></tr><tr><td>Custom Item Textures</td><td style="text-align:center;">CIT</td><td>自定义物品纹理</td></tr><tr><td>Custom Entity Models</td><td style="text-align:center;">CEM</td><td>自定义实体模型</td></tr><tr><td>Graphical User Interface</td><td style="text-align:center;">GUI</td><td>自定义游戏界面</td></tr><tr><td>Animation</td><td style="text-align:center;">-</td><td>自定义动态纹理</td></tr><tr><td>Emissive Textures</td><td style="text-align:center;">-</td><td>自发光纹理</td></tr><tr><td>Random Entities</td><td style="text-align:center;">-</td><td>随机实体纹理</td></tr><tr><td>Natural Textures</td><td style="text-align:center;">-</td><td>自然纹理</td></tr><tr><td>Custom Sky</td><td style="text-align:center;">-</td><td>自定义天空</td></tr></tbody></table>',7),p={href:"http://sqwatermark.com/resguide/optifinedoc/",target:"_blank",rel:"noopener noreferrer"},y=e("h2",{id:"pbr标准",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pbr标准","aria-hidden":"true"},"#"),t(" PBR标准")],-1),_=e("p",null,[t("PBR有两种工作流，一种是 "),e("code",null,"金属/粗糙度"),t(" ，另一种是 "),e("code",null,"镜面反射/光泽度"),t(" 。 对于PBR贴图上的通道的定义，在MC中有着不同的标准，例如 "),e("code",null,"OldPBR"),t("^JE^ 、"),e("code",null,"LabPBR"),t("^JE^ 、"),e("code",null,"四合一PBR"),t("^BE^等。")],-1),m=e("li",null,[e("code",null,"OldPBR"),t(" 是过时的PBR标准，在此不做讨论。")],-1),b=e("code",null,"LabPBR 1.3",-1),B=e("code",null,"金属/粗糙度",-1),E=e("strong",null,"材质属性",-1),f=e("code",null,"_n",-1),k=e("code",null,"_s",-1),R=e("strong",null,"共同定义",-1),w=o('<li><code>_n</code> 贴图： <ul><li><code>RGA</code>：与 <a href="#%E6%B3%95%E7%BA%BF%E8%B4%B4%E5%9B%BE">前文</a> 一致。</li><li><code>B</code> ：<strong>纹理环境光遮蔽</strong> (Texture AO) 强度。</li></ul></li><li><code>_s</code> 贴图： <ul><li><code>R</code> ：<strong>光滑度</strong>。</li><li><code>G</code> ：<strong>金属度</strong>，<code>230</code> 及以上的数值代表<strong>特定金属</strong>，<strong>详见下方链接</strong>。</li><li><code>B</code> ：<code>[0, 64]</code> <strong>孔隙度</strong> / <code>[65, 255]</code> <strong>次表面散射强度</strong>。</li><li><code>A</code> ：<strong>自发光</strong>，<code>[1, 254]</code> 范围内数值越大发光越强，当值为 <code>255</code> （即完全不透明）时不发光。</li></ul></li>',2),v={href:"https://wiki.shaderlabs.org/wiki/LabPBR_Material_Standard",target:"_blank",rel:"noopener noreferrer"},P=o("<li><code>四合一PBR</code> 是目前BE的约定现行标准。 <ul><li>主要为将 <code>主贴图</code> 、<code>法线贴图</code> 、<code>PBR贴图</code> 和附加的 <code>独立检测贴图</code> <strong>拼合</strong>到一张图内，得以实现光影读取。</li><li><strong>四合一标准详见BE光影 <code>YSS</code> 压缩包内的开发文档。</strong></li></ul></li>",1);function N(C,M){const c=l("RouterLink"),n=l("ExternalLinkIcon");return i(),s("div",null,[h,e("p",null,[e("strong",null,[t("由于目前所使用的文档编译器所支持的Markdown扩展格式不全，此文章可能会有一些显示问题，这些文本错误可能会造成阅读障碍，请移步 "),d(c,{to:"/science/resourcepacks_compatibility.html"},{default:r(()=>[t("兼容版本")]),_:1})])]),u,e("p",null,[t("参阅："),d(c,{to:"/science/terms.html#%E8%B4%B4%E5%9B%BE%E7%9B%B8%E5%85%B3"},{default:r(()=>[t("贴图相关 - 法线贴图")]),_:1})]),x,e("p",null,[t("这些贴图可以在OptiFine中使用，也可以使用第三方MOD实现。 详细介绍可参考 MCBBS 纹理版版主 SQwatermark 翻译的 "),e("a",p,[t("OptiFine官方文档"),d(n)]),t(" 。")]),y,e("p",null,[t("参阅："),d(c,{to:"/science/terms.html#%E6%B8%B2%E6%9F%93%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3"},{default:r(()=>[t("渲染技术相关 - PBR")]),_:1})]),_,e("ul",null,[m,e("li",null,[b,t(" 是JE的约定现行标准，工作流为 "),B,t(" 。其"),E,t("由 "),f,t(" 和 "),k,t(" 贴图"),R,t("。 "),e("ul",null,[w,e("li",null,[t("关于 LabPBR 的更多详细介绍，可参考 "),e("a",v,[t("官方文档"),d(n)]),t(" 。")])])]),P])])}const A=a(g,[["render",N],["__file","resourcepacks.html.vue"]]);export{A as default};
